"Type representing user."
type User implements Node {
  "The user's profile bio."
  bio: String
  "Country of the user."
  country: String
  "Identifies the date and time when the object was created."
  createdDate: DateTime
  "Devices that belongs to user."
  devices(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "Returns the first _n_ elements from the list."
    first: Int!
  ): DeviceConnection
  "The first name of the user."
  firstName: String
  "A unique identifier for the user."
  id: ID!
  "Whether the user profile is public or not."
  isPublic: Boolean
  "The last name of the user."
  lastName: String
  "Latitude of the user location."
  latitude: Float
  "Longitude of the user location."
  longitude: Float
  "Metadata of the user."
  metadata: UserMetadata
  "Identifies the date and time when the object was modified."
  modifyDate: DateTime
  "The username of the user."
  username: String
  "Devices that user have in watch list."
  watchedDevices(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "Returns the first _n_ elements from the list."
    first: Int!
  ): WatchedDeviceConnection
  "The website of the user."
  website: String
}

"The connection type for User."
type UserConnection {
  "A list of edges."
  edges: [UserEdge]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int
}

"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

extend type Query {
  "Display currently logged in user."
  me: User
  "Display public user."
  user("ID of the user." id: ID!): User
  "Display all public users."
  users(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "Returns the first _n_ elements from the list."
    first: Int!
  ): UserConnection
}
